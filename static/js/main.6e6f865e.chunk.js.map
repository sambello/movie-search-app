{"version":3,"sources":["components/MovieCard.js","components/SearchMovies.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","src","movie","poster_path","alt","title","release_date","vote_average","overview","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","length","filter","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iOAEe,SAASA,EAAUC,GAC9B,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cACXC,IAAG,0DAAqDF,EAAMG,MAAMC,aACpEC,IAAKL,EAAMG,MAAMG,MAAQ,YAE7B,yBAAKL,UAAU,iBACf,wBAAIA,UAAU,eAAeD,EAAMG,MAAMG,OACzC,2BAAG,gDAAsBN,EAAMG,MAAMI,eACrC,2BAAG,0CAAgBP,EAAMG,MAAMK,eAC/B,uBAAGP,UAAU,cAAcD,EAAMG,MAAMM,YCTpC,SAASC,IAAgB,IAAD,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAEPF,mBAAS,IAFF,mBAE5BG,EAF4B,KAEpBC,EAFoB,KAI7BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAGIC,EAJW,kHAIsGR,EAJtG,iDAOKS,MAAMD,GAPX,cAOPE,EAPO,gBAQMA,EAAIC,OARV,OAQPC,EARO,OASbT,EAAUS,EAAKC,SATF,kDAYbC,QAAQC,MAAR,MAZa,0DAAH,sDA0BlB,OACI,oCACI,0BAAM1B,UAAU,OAAO2B,SAAUZ,GAC7B,2BAAOf,UAAU,QAAQ4B,QAAQ,UACjC,2BACI5B,UAAU,QACV6B,KAAK,OACLC,KAAK,QACLC,YAAY,aACZC,MAAOrB,EACPsB,SAdK,SAACjB,GAClBJ,EAASI,EAAEkB,OAAOF,UAeV,4BAAQhC,UAAU,SAAS6B,KAAK,UAAhC,WAEJ,yBAAK7B,UAAU,aACVa,EAAOsB,OAAS,EAvBrBtB,EAAOuB,QAAO,SAAAlC,GAAK,OAAIA,EAAMC,eAAakC,KAAI,SAAAnC,GAAK,OAAK,kBAACJ,EAAD,CAAWwC,IAAKpC,EAAMqC,GAAIrC,MAAOA,OAuB9C,OCpCxCsC,MATf,WACC,OACC,yBAAKxC,UAAU,aACd,wBAAIA,UAAU,SAAd,gBACA,kBAACS,EAAD,QCIiBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLD,QAAQC,MAAMA,EAAMgC,a","file":"static/js/main.6e6f865e.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function MovieCard(props) {\n    return (\n        <div className=\"card\" >\n            <img className=\"card--image\"\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${props.movie.poster_path}`}\n                alt={props.movie.title + ' poster'}\n                />\n            <div className=\"card--content\">\n            <h3 className=\"card--title\">{props.movie.title}</h3>\n            <p><small>RELEASE DATE: {props.movie.release_date}</small></p>\n            <p><small>RATING: {props.movie.vote_average}</small></p>\n            <p className=\"card--desc\">{props.movie.overview}</p>\n            </div>\n        </div>\n    )\n}","import React, {useState} from \"react\";\n\nimport MovieCard from \"./MovieCard\";\n\nexport default function SearchMovies() {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState('');\n\n    const searchMovies = async (e) => {\n        e.preventDefault();\n\n        // const API_KEY = process.env.API_KEY;\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=c41a7b1e642e7162a71ce85a73130f72&language=en-US&query=${query}&page=1&include_adult=false`;\n    \n        try {\n            const res = await fetch(url);\n            const data = await res.json();\n            setMovies(data.results);\n\n        } catch(err) {\n            console.error(err);\n        }\n    }\n\n    const displayMovies = () => {\n        return (\n            movies.filter(movie => movie.poster_path).map(movie => (<MovieCard key={movie.id} movie={movie} />))\n        )\n    }\n\n    const handleChange = (e) => {\n        setQuery(e.target.value);\n    }\n\n    return (\n        <>\n            <form className=\"form\" onSubmit={searchMovies}>\n                <label className=\"label\" htmlFor=\"query\"></label>\n                <input \n                    className=\"input\" \n                    type=\"text\"\n                    name=\"query\"\n                    placeholder=\"Movie Name\"\n                    value={query}\n                    onChange={handleChange}\n                />\n                <button className=\"button\" type=\"submit\">Search</button>\n            </form>\n            <div className=\"card-list\">\n                {movies.length > 0 ? displayMovies() : null}\n            </div>    \n        </>\n    );\n}","import React from 'react';\n\nimport SearchMovies from \"./components/SearchMovies\"\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1 className=\"title\">Movie Search</h1>\n\t\t\t<SearchMovies />\n\t\t</div>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}